"Windows Batch snippets for js rules"

# TODO: Instead of setting a new RUNFILES env; just set RUNFILES_DIR if it is not set;
#       needs testing to know if RUNFILES_DIR is set always set to the same value as RUNFILES
#       when it is set.
# Batch snippet to initialize the RUNFILES environment variable.
# Depends on there being a logf_fatal function defined.
# NB: If this can be generalized fully in the future and not depend on logf_fatal
# then it could be hoisted to bazel-lib where we have other batch snippets.
BAT_INITIALIZE_RUNFILES = r"""
rem Initialize RUNFILES environment variable for Windows batch
rem This is the Windows batch equivalent of the bash runfiles initialization

:init_runfiles
rem Set a RUNFILES environment variable to the root of the runfiles tree
rem since RUNFILES_DIR is not set by Bazel in all contexts.
rem For example, `RUNFILES=C:\path\to\my_js_binary.bat.runfiles`.
rem
rem Call this program X. X was generated by a genrule and may be invoked
rem in many ways:
rem   1a) directly by a user, with %0 in the output tree
rem   1b) via 'bazel run' (similar to case 1a)
rem   2) directly by a user, with %0 in X's runfiles
rem   3) by another program Y which has a data dependency on X, with %0 in Y's
rem      runfiles
rem   4a) via 'bazel test'
rem   4b) case 3 in the context of a test
rem   5a) by a genrule cmd, with %0 in the output tree
rem   6a) case 3 in the context of a genrule
rem
rem For case 1, %0 will be a regular file, and the runfiles will be
rem at %0.runfiles.
rem For case 2 or 3, %0 will be a symlink to the file seen in case 1.
rem For case 4, %TEST_SRCDIR% should already be set to the runfiles by
rem bazel.
rem Case 5a is handled like case 1.
rem Case 6a is handled like case 3.

if defined TEST_SRCDIR (
    rem Case 4, bazel has identified runfiles for us.
    set "RUNFILES=%TEST_SRCDIR%"
    rem Convert forward slashes to backslashes
    set "RUNFILES=!RUNFILES:/=\!"
) else if defined RUNFILES_MANIFEST_FILE (
    set "RUNFILES=%RUNFILES_MANIFEST_FILE%"
    rem Convert forward slashes to backslashes
    set "RUNFILES=!RUNFILES:/=\!"
    rem Check if RUNFILES ends with .runfiles_manifest
    if "!RUNFILES:~-17!"==".runfiles_manifest" (
        rem Newer versions of Bazel put the manifest besides the runfiles with the suffix .runfiles_manifest.
        rem For example, the runfiles directory is named my_binary.runfiles then the manifest is beside the
        rem runfiles directory and named my_binary.runfiles_manifest
        set "RUNFILES=!RUNFILES:~0,-17!"
    ) else (
        rem Check if RUNFILES ends with \MANIFEST
        echo !RUNFILES! | findstr /c:"\MANIFEST" >nul
        if !errorlevel! equ 0 (
            rem Older versions of Bazel put the manifest file named MANIFEST in the runfiles directory
            set "RUNFILES=!RUNFILES:\MANIFEST=!"
        ) else (
            call :logf_fatal "Unexpected RUNFILES_MANIFEST_FILE value %RUNFILES_MANIFEST_FILE%"
            exit /b 1
        )
    )
) else (
    rem Determine the full path of the current script
    set "self=%~f0"
    
    :resolve_runfiles_loop
    rem Check if .runfiles directory exists next to the script
    if exist "!self!.runfiles" (
        set "RUNFILES=!self!.runfiles"
        goto :runfiles_found
    )
    
    rem Check if we're inside a .runfiles directory
    echo !self! | findstr /c:".runfiles\" >nul
    if !errorlevel! equ 0 (
        rem Extract the runfiles directory path
        for /f "tokens=1 delims=" %%a in ('echo !self! ^| findstr /o /c:".runfiles\"') do set "pos_info=%%a"
        for /f "tokens=1 delims=:" %%b in ("!pos_info!") do set "pos=%%b"
        set /a "end_pos=!pos!+9"
        for /f %%c in ('echo !self! ^| findstr /c:".runfiles\"') do (
            for /f "tokens=1 delims=\" %%d in ("%%c") do (
                set "base_part=%%d"
            )
        )
        rem Find the .runfiles directory by going back from current position
        for /f "delims=" %%e in ('echo !self!') do (
            set "temp_path=%%e"
            for /f "tokens=1,* delims=\" %%f in ("!temp_path!") do (
                if "%%g"=="" (
                    if exist "%%f.runfiles" set "RUNFILES=%%f.runfiles"
                ) else (
                    call :extract_runfiles_path "%%e"
                )
            )
        )
        rem This is a last resort for case 6b - don't exit the loop yet
    )
    
    rem For Windows, we don't need to resolve symlinks like in bash since
    rem Windows batch files don't typically use symlinks in the same way
    rem If we reach here and haven't found runfiles, we'll fail below
    
    :runfiles_found
    if not defined RUNFILES (
        call :logf_fatal "RUNFILES environment variable is not set"
        exit /b 1
    )
    
    rem Convert forward slashes to backslashes
    set "RUNFILES=!RUNFILES:/=\!"
)

rem Ensure RUNFILES is an absolute path
echo !RUNFILES! | findstr "^[A-Za-z]:" >nul
if !errorlevel! neq 0 (
    rem RUNFILES is not absolute, make it relative to current directory
    set "RUNFILES=%CD%\!RUNFILES!"
)

goto :runfiles_init_done

:extract_runfiles_path
set "input_path=%~1"
rem Simple approach to find .runfiles directory in path
for /f "tokens=*" %%a in ('echo %input_path% ^| findstr /c:".runfiles"') do (
    set "temp=%%a"
    for /f "tokens=1 delims=\" %%b in ('echo !temp! ^| findstr /o /c:".runfiles"') do (
        set "match_info=%%b"
        for /f "tokens=1 delims=:" %%c in ("!match_info!") do (
            set "match_pos=%%c"
            set /a "runfiles_end=!match_pos!+8"
            set "RUNFILES=!input_path:~0,%runfiles_end%!"
        )
    )
)
exit /b 0

:runfiles_init_done
"""