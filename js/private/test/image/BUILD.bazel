load("@npm//:defs.bzl", "npm_link_all_packages")
load("//js:defs.bzl", "js_binary")
load(":asserts.bzl", "assert_checksum", "assert_js_image_layer_listings", "make_js_image_layer")

npm_link_all_packages(name = "node_modules")

js_binary(
    name = "bin",
    data = [
        ":node_modules",
    ],
    entry_point = "main.js",
)

platform(
    name = "linux_amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# All these golden files can be updated with
# bazel run //js/private/test/image:default_test_update_all --enable_bzlmod
# bazel run //js/private/test/image:custom_owner_test_update_all --enable_bzlmod
# bazel run //js/private/test/image:default_test_update_all --noenable_bzlmod
# bazel run //js/private/test/image:custom_owner_test_update_all --noenable_bzlmod

# Case 0: reproducibility guarantees
make_js_image_layer(
    name = "cksum",
    binary = ":bin",
    # gzip compression embeds os information into the archive which is not okay from reproducibility standpoint.
    # set it to none since uncompressed archive is always stable.
    # more: https://stackoverflow.com/questions/26516369/zlib-gzip-produces-different-results-for-same-input-on-different-oses
    compression = "none",
    platform = ":linux_amd64",
    root = "/app",
)

assert_checksum(
    name = "checksum_test",
    image_layer = ":cksum",
)

# Case 1: Defaults
make_js_image_layer(
    name = "default",
    binary = ":bin",
    platform = ":linux_amd64",
    root = "/app",
)

assert_js_image_layer_listings(
    name = "default_test",
    js_image_layer = ":default",
)

# Case 2: Change owner
make_js_image_layer(
    name = "custom_owner",
    binary = ":bin",
    owner = "100:0",
    platform = ":linux_amd64",
    root = "/app",
)

assert_js_image_layer_listings(
    name = "custom_owner_test",
    js_image_layer = ":custom_owner",
)
