"""Runs a binary as a build action. This rule does not require Bash (unlike native.genrule()).

This fork of bazel-skylib's run_binary adds directory output support and better makevar expansions.
"""

load("@aspect_bazel_lib//lib:run_binary.bzl", _run_binary = "run_binary")
load("@aspect_bazel_lib//lib:copy_to_bin.bzl", _copy_to_bin = "copy_to_bin")
load("@bazel_skylib//lib:dicts.bzl", "dicts")

def run_binary(
    name,
    tool,
    env = {},
    srcs = [],
    output_dir = False,
    outs = [],
    args = [],
    chdir = "",
    copy_srcs_to_bin = False,
    **kwargs):
    """Runs a binary as a build action.

    This rule does not require Bash `native.genrule`.

    Args:
        name: Target name
        tool: The tool to run in the action.

            Must be the label of a *_binary rule, of a rule that generates an executable file, or of a file
            that can be executed as a subprocess (e.g. an .exe or .bat file on Windows or a binary with
            executable permission on Linux). This label is available for `$(location)` expansion in `args` and
            `env`.

        env: Environment variables of the action.

            Subject to `$(location)` and make variable expansion.

        srcs: Additional inputs of the action.

            These labels are available for `$(location)` expansion in `args` and `env`.

        output_dir: Set to True if you want the output to be a directory.

            Exactly one of `outs`, `output_dir` may be used.
            If you output a directory, there can only be one output, which will be a
            directory named the same as the target.

        outs: Output files generated by the action.

            These labels are available for `$(location)` expansion in `args` and `env`.

        args: Command line arguments of the binary.

            Subject to `$(location)` and make variable expansion.

        chdir: Working directory to run the binary or test in, relative to the workspace.

            By default, Bazel always runs in the workspace root.

            To run in the directory containing the run_binary under the source tree, use
            `chdir = package_name()` (or if you're in a macro, use `native.package_name()`).

            To run in the output directory where the run_binary writes outputs, use
            `chdir = "$(RULEDIR)"`

            WARNING: this will affect other paths passed to the program, either as arguments or in configuration files,
            which are workspace-relative.

            You may need `../../` segments to re-relativize such paths to the new working directory.
            In a `BUILD` file you could do something like this to point to the output path:

            ```python
            run_binary(
                ...
                chdir = package_name(),
                # ../.. segments to re-relative paths from the chdir back to workspace
                args = ["/".join([".."] * len(package_name().split("/")) + ["$@"])],
            )
            ```

        copy_srcs_to_bin: Set to True if you want all srcs files copied to the output tree that are not already there.

            To reference the output tree location of a source file that is copied, prepend an `$(execpath)`
            expansions with `$(BINDIR)`. For example, `$(BINDIR)/$(execpath //path/to/source:file)`.

        **kwargs: Additional arguments
    """
    all_srcs = srcs
    if copy_srcs_to_bin:
        copy_to_bin_name = "%s_copy_srcs_to_bin" % name
        _copy_to_bin(
            name = copy_to_bin_name,
            srcs = srcs,
            tags = kwargs.get("tags"),
        )
        all_srcs.append(":%s" % copy_to_bin_name)

    extra_env = {
        "BAZEL_BINDIR": "$(BINDIR)",
        "BAZEL_BUILD_FILE_PATH": "$(BUILD_FILE_PATH)",
        "BAZEL_VERSION_FILE": "$(VERSION_FILE)",
        "BAZEL_INFO_FILE": "$(INFO_FILE)",
        "BAZEL_TARGET": "$(TARGET)",
        "BAZEL_WORKSPACE": "$(WORKSPACE)",
        "BAZEL_TARGET_CPU": "$(TARGET_CPU)",
        "BAZEL_COMPILATION_MODE": "$(COMPILATION_MODE)",
    }

    if chdir:
        extra_env["BAZEL_CHDIR"] = chdir

    _run_binary(
        name = name,
        tool = tool,
        env = dicts.add(extra_env, env),
        srcs = all_srcs,
        output_dir = output_dir,
        outs = outs,
        args = args,
        **kwargs,
    )
