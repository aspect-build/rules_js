load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_library", "js_run_devserver")
load("@com_github_ash2k_bazel_tools//multirun:def.bzl", "command", "multirun")
load("@npm//:http-server/package_json.bzl", http_server_bin = "bin")

http_server_bin.http_server_binary(
    name = "http_server",
)

# A trivial graph of sources to include in js_run_devserver data to test
# that transitive sources are include
js_library(
    name = "transitive_web_files",
    srcs = ["other.html"],
)

js_library(
    name = "web_files",
    srcs = ["index.html"],
    deps = [":transitive_web_files"],
)

# Simple js_run_devserver rule that syncs two html files and takes an http-server js_binary
# as the tool
js_run_devserver(
    name = "devserver",
    chdir = package_name(),
    data = [":web_files"],
    log_level = "debug",
    tool = ":http_server",
)

# Use command to bake-in the arguments into the runnable binary so that the target
# can be used with `multirun` below.
command(
    name = "serve",
    arguments = ["."],
    command = ":devserver",
)

copy_to_directory(
    name = "http_root",
    srcs = [
        "index.html",
        "other.html",
    ],
)

# Variation of a js_run_devserver target that syncs a tree artifact (:http_root) and the http-server
# node_modules link and takes a command to run http-server from its node_modules/.bin/http-server
# entry point
js_run_devserver(
    name = "devserver_alt",
    chdir = package_name(),
    command = "../node_modules/.bin/http-server",
    data = [
        ":http_root",
        ":web_files",
        "//:node_modules/http-server",
    ],
    log_level = "debug",
)

command(
    name = "serve_alt",
    arguments = ["."],
    command = ":devserver_alt",
)

# Use command to bake-in the arguments into the runnable binary so that the target
# can be used with `multirun` below.
command(
    name = "serve-multi-1",
    arguments = ["http_root"],
    command = ":devserver_alt",
    environment = {
        "PORT": "8080",
    },
)

command(
    name = "serve-multi-2",
    arguments = ["http_root"],
    command = ":devserver_alt",
    environment = {
        "PORT": "8081",
    },
)

# Example of using multi-run to run two binaries at the same time.
# See https://github.com/ash2k/bazel-tools/tree/master/multirun.
# This can be used with ibazel: ibazel run //src:serve_all
multirun(
    name = "serve_multi",
    commands = [
        ":serve-multi-1",
        ":serve-multi-2",
    ],
    jobs = 0,
)

# Intentionally a js_library and not a js_binary to test that transitive npm are
# include in js_run_devserver. See https://github.com/aspect-build/rules_webpack/issues/66.
js_library(
    name = "simple",
    srcs = [
        "simple.js",
    ],
    deps = [
        "//:node_modules/chalk",
    ],
)

# Another example but this time using a simple custom http-server js_library
js_run_devserver(
    name = "serve_simple",
    chdir = package_name(),
    command = "./simple.js",
    data = [
        ":simple",
        ":web_files",
    ],
    log_level = "debug",
)

# Now the js_binary variant
js_binary(
    name = "simple_bin",
    data = [
        "//:node_modules/chalk",
    ],
    entry_point = "simple.js",
)

# Another example but this time using a simple custom http-server js_binary
js_run_devserver(
    name = "serve_simple_bin",
    chdir = package_name(),
    data = [
        ":web_files",
    ],
    log_level = "debug",
    tool = ":simple_bin",
)

# Intentionally a js_library and not a js_binary to test that transitive npm are
# include in js_run_devserver. See https://github.com/aspect-build/rules_webpack/issues/66.
js_library(
    name = "naughty",
    srcs = [
        "naughty.js",
    ],
    deps = [
        "//:node_modules/chalk",
    ],
)

# Another example but this time using a naughty custom http-server js_library
js_run_devserver(
    name = "serve_naughty",
    chdir = package_name(),
    command = "./naughty.js",
    data = [
        ":naughty",
        ":web_files",
    ],
    grant_sandbox_write_permissions = True,
    log_level = "debug",
)

# Now the js_binary variant
js_binary(
    name = "naughty_bin",
    data = [
        "//:node_modules/chalk",
    ],
    entry_point = "naughty.js",
)

# Another example but this time using a naughty custom http-server js_binary
js_run_devserver(
    name = "serve_naughty_bin",
    chdir = package_name(),
    data = [
        ":web_files",
    ],
    grant_sandbox_write_permissions = True,
    log_level = "debug",
    tool = ":naughty_bin",
)
