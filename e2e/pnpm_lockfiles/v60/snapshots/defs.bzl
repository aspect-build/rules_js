"""@generated by npm_translate_lock(name = "lock-<LOCKVERSION>", pnpm_lock = "@@//<LOCKVERSION>:pnpm-lock.yaml")"""

load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__ansi-regex__5.0.1__links//:defs.bzl", store_0 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__ansi-regex__6.1.0__links//:defs.bzl", store_1 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__ansi-styles__4.3.0__links//:defs.bzl", store_2 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__ansi-styles__6.2.1__links//:defs.bzl", store_3 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_a__5.0.2__links//:defs.bzl", link_4 = "npm_link_imported_package_store", store_4 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_b__5.0.2__links//:defs.bzl", link_5 = "npm_link_imported_package_store", store_5 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_c__2.0.0__links//:defs.bzl", link_6 = "npm_link_imported_package_store", store_6 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_c__2.0.2__links//:defs.bzl", store_7 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_d__2.0.0_at_aspect-test_c_2.0.2__links//:defs.bzl", store_8 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_aspect-test_e__1.0.0__links//:defs.bzl", link_9 = "npm_link_imported_package_store", store_9 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_foo_jsonify__at_github.com_aspect-build_test-packages_releases_download_0.0.0_at_foo-jsonify-0.0.0.tgz__links//:defs.bzl", link_10 = "npm_link_imported_package_store", store_10 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_isaacs_cliui__8.0.2__links//:defs.bzl", link_11 = "npm_link_imported_package_store", store_11 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_rollup_plugin-typescript__8.2.1_1813138439__links//:defs.bzl", link_12 = "npm_link_imported_package_store", store_12 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_rollup_pluginutils__3.1.0_rollup_3.29.4__links//:defs.bzl", store_13 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_archiver__5.3.1__links//:defs.bzl", link_14 = "npm_link_imported_package_store", store_14 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_estree__0.0.39__links//:defs.bzl", store_15 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_glob__8.1.0__links//:defs.bzl", store_16 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_minimatch__5.1.2__links//:defs.bzl", store_17 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_node__16.18.11__links//:defs.bzl", link_18 = "npm_link_imported_package_store", store_18 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__at_types_sizzle__2.3.9__links//:defs.bzl", link_19 = "npm_link_imported_package_store", store_19 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__color-convert__2.0.1__links//:defs.bzl", store_20 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__color-name__1.1.4__links//:defs.bzl", store_21 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__debug__github.com_ngokevin_debug_9742c5f383a6f8046241920156236ade8ec30d53__links//:defs.bzl", link_22 = "npm_link_imported_package_store", store_22 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__dequal__2.0.3__links//:defs.bzl", store_23 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__diff__at_github.com_kpdecker_jsdiff_archive_refs_tags_v5.2.0.tar.gz__links//:defs.bzl", store_24 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__eastasianwidth__0.2.0__links//:defs.bzl", store_25 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__emoji-regex__8.0.0__links//:defs.bzl", store_26 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__emoji-regex__9.2.2__links//:defs.bzl", store_27 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__estree-walker__1.0.1__links//:defs.bzl", store_28 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__fsevents__2.3.3__links//:defs.bzl", store_29 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__function-bind__1.1.2__links//:defs.bzl", store_30 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__hasown__2.0.2__links//:defs.bzl", store_31 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__hello__at_gitpkg.vercel.app_EqualMa_gitpkg-hello_packages_hello__links//:defs.bzl", link_32 = "npm_link_imported_package_store", store_32 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-core-module__2.16.1__links//:defs.bzl", store_33 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-fullwidth-code-point__3.0.0__links//:defs.bzl", store_34 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-odd__0.1.0__links//:defs.bzl", link_35 = "npm_link_imported_package_store", store_35 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-odd__1.0.0__links//:defs.bzl", link_36 = "npm_link_imported_package_store", store_36 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-odd__2.0.0__links//:defs.bzl", link_37 = "npm_link_imported_package_store", store_37 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-odd__3.0.0__links//:defs.bzl", link_38 = "npm_link_imported_package_store", store_38 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__is-odd__3.0.1__links//:defs.bzl", link_39 = "npm_link_imported_package_store", store_39 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__jquery__github.com_jquery_jquery_e61fccb9d736235b4b011f89cba6866bc0b8997d__links//:defs.bzl", link_40 = "npm_link_imported_package_store", store_40 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__kleur__4.1.5__links//:defs.bzl", store_41 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__meaning-of-life__1.0.0_o3deharooos255qt5xdujc3cuq__links//:defs.bzl", link_42 = "npm_link_imported_package_store", store_42 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__mri__1.2.0__links//:defs.bzl", store_43 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__ms__0.7.3__links//:defs.bzl", store_44 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__path-parse__1.0.7__links//:defs.bzl", store_45 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__picomatch__2.3.1__links//:defs.bzl", store_46 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__resolve__1.22.10__links//:defs.bzl", store_47 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__rollup__2.14.0__links//:defs.bzl", link_48 = "npm_link_imported_package_store", store_48 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__rollup__3.29.4__links//:defs.bzl", link_49 = "npm_link_imported_package_store", store_49 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__sade__1.8.1__links//:defs.bzl", store_50 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__string-width__4.2.3__links//:defs.bzl", store_51 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__string-width__5.1.2__links//:defs.bzl", store_52 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__strip-ansi__6.0.1__links//:defs.bzl", store_53 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__strip-ansi__7.1.0__links//:defs.bzl", store_54 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__supports-preserve-symlinks-flag__1.0.0__links//:defs.bzl", store_55 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__tslib__2.6.3__links//:defs.bzl", link_56 = "npm_link_imported_package_store", store_56 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__typescript__5.5.2__links//:defs.bzl", link_57 = "npm_link_imported_package_store", store_57 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__uvu__0.5.6__links//:defs.bzl", link_58 = "npm_link_imported_package_store", store_58 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__wrap-ansi__7.0.0__links//:defs.bzl", store_59 = "npm_imported_package_store")
load("@@aspect_rules_js~~npm~lock-<LOCKVERSION>__wrap-ansi__8.1.0__links//:defs.bzl", store_60 = "npm_imported_package_store")

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//js:defs.bzl", _js_library = "js_library")

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//npm/private:npm_link_package_store.bzl", _npm_link_package_store = "npm_link_package_store")

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//npm/private:npm_package_store.bzl", _npm_package_store = "npm_package_store")

_LINK_PACKAGES = ["<LOCKVERSION>", "projects/a", "projects/a-types", "projects/b", "projects/c", "projects/d", "projects/peers", "vendored/is-number"]

# buildifier: disable=function-docstring
def npm_link_all_packages(name = "node_modules", imported_links = []):
    bazel_package = native.package_name()
    root_package = "<LOCKVERSION>"
    is_root = bazel_package == root_package
    link = bazel_package in _LINK_PACKAGES
    if not is_root and not link:
        msg = "The npm_link_all_packages() macro loaded from @aspect_rules_js~~npm~lock-<LOCKVERSION>//:defs.bzl and called in bazel package '%s' may only be called in bazel packages that correspond to the pnpm root package or pnpm workspace projects. Projects are discovered from the pnpm-lock.yaml and may be missing if the lockfile is out of date. Root package: '<LOCKVERSION>', pnpm workspace projects: %s" % (bazel_package, "'" + "', '".join(_LINK_PACKAGES) + "'")
        fail(msg)
    link_targets = []
    scope_targets = {}

    for link_fn in imported_links:
        new_link_targets, new_scope_targets = link_fn(name)
        link_targets.extend(new_link_targets)
        for _scope, _targets in new_scope_targets.items():
            if _scope not in scope_targets:
                scope_targets[_scope] = []
            scope_targets[_scope].extend(_targets)

    if is_root:
        store_0(name = "{}/ansi-regex".format(name))
        store_1(name = "{}/ansi-regex".format(name))
        store_2(name = "{}/ansi-styles".format(name))
        store_3(name = "{}/ansi-styles".format(name))
        store_4(name = "{}/@aspect-test/a".format(name))
        store_5(name = "{}/@aspect-test/b".format(name))
        store_6(name = "{}/@aspect-test/c".format(name))
        store_7(name = "{}/@aspect-test/c".format(name))
        store_8(name = "{}/@aspect-test/d".format(name))
        store_9(name = "{}/@aspect-test/e".format(name))
        store_10(name = "{}/@foo/jsonify".format(name))
        store_11(name = "{}/@isaacs/cliui".format(name))
        store_12(name = "{}/@rollup/plugin-typescript".format(name))
        store_13(name = "{}/@rollup/pluginutils".format(name))
        store_14(name = "{}/@types/archiver".format(name))
        store_15(name = "{}/@types/estree".format(name))
        store_16(name = "{}/@types/glob".format(name))
        store_17(name = "{}/@types/minimatch".format(name))
        store_18(name = "{}/@types/node".format(name))
        store_19(name = "{}/@types/sizzle".format(name))
        store_20(name = "{}/color-convert".format(name))
        store_21(name = "{}/color-name".format(name))
        store_22(name = "{}/debug".format(name))
        store_23(name = "{}/dequal".format(name))
        store_24(name = "{}/diff".format(name))
        store_25(name = "{}/eastasianwidth".format(name))
        store_26(name = "{}/emoji-regex".format(name))
        store_27(name = "{}/emoji-regex".format(name))
        store_28(name = "{}/estree-walker".format(name))
        store_29(name = "{}/fsevents".format(name))
        store_30(name = "{}/function-bind".format(name))
        store_31(name = "{}/hasown".format(name))
        store_32(name = "{}/hello".format(name))
        store_33(name = "{}/is-core-module".format(name))
        store_34(name = "{}/is-fullwidth-code-point".format(name))
        store_35(name = "{}/is-odd".format(name))
        store_36(name = "{}/is-odd".format(name))
        store_37(name = "{}/is-odd".format(name))
        store_38(name = "{}/is-odd".format(name))
        store_39(name = "{}/is-odd".format(name))
        store_40(name = "{}/jquery".format(name))
        store_41(name = "{}/kleur".format(name))
        store_42(name = "{}/meaning-of-life".format(name))
        store_43(name = "{}/mri".format(name))
        store_44(name = "{}/ms".format(name))
        store_45(name = "{}/path-parse".format(name))
        store_46(name = "{}/picomatch".format(name))
        store_47(name = "{}/resolve".format(name))
        store_48(name = "{}/rollup".format(name))
        store_49(name = "{}/rollup".format(name))
        store_50(name = "{}/sade".format(name))
        store_51(name = "{}/string-width".format(name))
        store_52(name = "{}/string-width".format(name))
        store_53(name = "{}/strip-ansi".format(name))
        store_54(name = "{}/strip-ansi".format(name))
        store_55(name = "{}/supports-preserve-symlinks-flag".format(name))
        store_56(name = "{}/tslib".format(name))
        store_57(name = "{}/typescript".format(name))
        store_58(name = "{}/uvu".format(name))
        store_59(name = "{}/wrap-ansi".format(name))
        store_60(name = "{}/wrap-ansi".format(name))
    if link:
        if bazel_package == "<LOCKVERSION>":
            link_4(name = "{}/@aspect-test-a-bad-scope".format(name))
            link_targets.append("//{}:{}/@aspect-test-a-bad-scope".format(bazel_package, name))
            if "@aspect-test-a-bad-scop" not in scope_targets:
                scope_targets["@aspect-test-a-bad-scop"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test-a-bad-scop"].append(link_targets[-1])
            link_4(name = "{}/@aspect-test-custom-scope/a".format(name))
            link_targets.append("//{}:{}/@aspect-test-custom-scope/a".format(bazel_package, name))
            if "@aspect-test-custom-scope" not in scope_targets:
                scope_targets["@aspect-test-custom-scope"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test-custom-scope"].append(link_targets[-1])
            link_4(name = "{}/@aspect-test/a".format(name))
            link_targets.append("//{}:{}/@aspect-test/a".format(bazel_package, name))
            if "@aspect-test" not in scope_targets:
                scope_targets["@aspect-test"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test"].append(link_targets[-1])
            link_4(name = "{}/@aspect-test/a2".format(name))
            link_targets.append("//{}:{}/@aspect-test/a2".format(bazel_package, name))
            if "@aspect-test" not in scope_targets:
                scope_targets["@aspect-test"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test"].append(link_targets[-1])
            link_4(name = "{}/aspect-test-a-no-scope".format(name))
            link_targets.append("//{}:{}/aspect-test-a-no-scope".format(bazel_package, name))
            link_4(name = "{}/aspect-test-a/no-at".format(name))
            link_targets.append("//{}:{}/aspect-test-a/no-at".format(bazel_package, name))
            link_5(name = "{}/@aspect-test/b".format(name))
            link_targets.append("//{}:{}/@aspect-test/b".format(bazel_package, name))
            if "@aspect-test" not in scope_targets:
                scope_targets["@aspect-test"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test"].append(link_targets[-1])
            link_6(name = "{}/@aspect-test/c".format(name))
            link_targets.append("//{}:{}/@aspect-test/c".format(bazel_package, name))
            if "@aspect-test" not in scope_targets:
                scope_targets["@aspect-test"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test"].append(link_targets[-1])
            link_9(name = "{}/@aspect-test/e".format(name))
            link_targets.append("//{}:{}/@aspect-test/e".format(bazel_package, name))
            if "@aspect-test" not in scope_targets:
                scope_targets["@aspect-test"] = [link_targets[-1]]
            else:
                scope_targets["@aspect-test"].append(link_targets[-1])
            link_10(name = "{}/jsonify".format(name))
            link_targets.append("//{}:{}/jsonify".format(bazel_package, name))
            link_11(name = "{}/@isaacs/cliui".format(name))
            link_targets.append("//{}:{}/@isaacs/cliui".format(bazel_package, name))
            if "@isaacs" not in scope_targets:
                scope_targets["@isaacs"] = [link_targets[-1]]
            else:
                scope_targets["@isaacs"].append(link_targets[-1])
            link_12(name = "{}/rollup-plugin-with-peers".format(name))
            link_targets.append("//{}:{}/rollup-plugin-with-peers".format(bazel_package, name))
            link_14(name = "{}/@types/archiver".format(name))
            link_targets.append("//{}:{}/@types/archiver".format(bazel_package, name))
            if "@types" not in scope_targets:
                scope_targets["@types"] = [link_targets[-1]]
            else:
                scope_targets["@types"].append(link_targets[-1])
            link_18(name = "{}/@types/node".format(name))
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))
            if "@types" not in scope_targets:
                scope_targets["@types"] = [link_targets[-1]]
            else:
                scope_targets["@types"].append(link_targets[-1])
            link_18(name = "{}/alias-types-node".format(name))
            link_targets.append("//{}:{}/alias-types-node".format(bazel_package, name))
            link_19(name = "{}/alias-only-sizzle".format(name))
            link_targets.append("//{}:{}/alias-only-sizzle".format(bazel_package, name))
            link_22(name = "{}/debug".format(name))
            link_targets.append("//{}:{}/debug".format(bazel_package, name))
            link_32(name = "{}/hello".format(name))
            link_targets.append("//{}:{}/hello".format(bazel_package, name))
            link_35(name = "{}/is-odd-v0".format(name))
            link_targets.append("//{}:{}/is-odd-v0".format(bazel_package, name))
            link_36(name = "{}/is-odd-v1".format(name))
            link_targets.append("//{}:{}/is-odd-v1".format(bazel_package, name))
            link_37(name = "{}/is-odd-v2".format(name))
            link_targets.append("//{}:{}/is-odd-v2".format(bazel_package, name))
            link_38(name = "{}/is-odd-v3".format(name))
            link_targets.append("//{}:{}/is-odd-v3".format(bazel_package, name))
            link_39(name = "{}/is-odd".format(name))
            link_targets.append("//{}:{}/is-odd".format(bazel_package, name))
            link_39(name = "{}/is-odd-alias".format(name))
            link_targets.append("//{}:{}/is-odd-alias".format(bazel_package, name))
            link_40(name = "{}/jquery-git-ssh-e61fccb".format(name))
            link_targets.append("//{}:{}/jquery-git-ssh-e61fccb".format(bazel_package, name))
            link_42(name = "{}/meaning-of-life".format(name))
            link_targets.append("//{}:{}/meaning-of-life".format(bazel_package, name))
            link_48(name = "{}/rollup".format(name))
            link_targets.append("//{}:{}/rollup".format(bazel_package, name))
            link_49(name = "{}/rollup3".format(name))
            link_targets.append("//{}:{}/rollup3".format(bazel_package, name))
            link_56(name = "{}/tslib".format(name))
            link_targets.append("//{}:{}/tslib".format(bazel_package, name))
            link_57(name = "{}/typescript".format(name))
            link_targets.append("//{}:{}/typescript".format(bazel_package, name))
            link_58(name = "{}/uvu".format(name))
            link_targets.append("//{}:{}/uvu".format(bazel_package, name))
        elif bazel_package == "projects/a-types":
            link_18(name = "{}/@types/node".format(name))
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))
            if "@types" not in scope_targets:
                scope_targets["@types"] = [link_targets[-1]]
            else:
                scope_targets["@types"].append(link_targets[-1])
        elif bazel_package == "projects/b":
            link_18(name = "{}/@types/node".format(name))
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))
            if "@types" not in scope_targets:
                scope_targets["@types"] = [link_targets[-1]]
            else:
                scope_targets["@types"].append(link_targets[-1])

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/@scoped+c@0.0.0".format(name),
            src = "//projects/c:pkg",
            package = "@scoped/c",
            version = "0.0.0",
            deps = {
                "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+a@0.0.0".format(name): "@scoped/a",
            },
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/@scoped/c".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+c@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/@scoped/c/dir".format(name),
                srcs = [":{}/@scoped/c".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/@scoped/c".format(name))
            if "@scoped" not in scope_targets:
                scope_targets["@scoped"] = [link_targets[-1]]
            else:
                scope_targets["@scoped"].append(link_targets[-1])

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/is-number@0.0.0".format(name),
            src = "//vendored/is-number:pkg",
            package = "is-number",
            version = "0.0.0",
            deps = {},
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/@scoped+a@0.0.0".format(name),
            src = "//projects/a:pkg",
            package = "@scoped/a",
            version = "0.0.0",
            deps = {},
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["<LOCKVERSION>", "projects/b", "projects/c", "projects/d", "projects/peers"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/@scoped/a".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+a@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/@scoped/a/dir".format(name),
                srcs = [":{}/@scoped/a".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/@scoped/a".format(name))
            if "@scoped" not in scope_targets:
                scope_targets["@scoped"] = [link_targets[-1]]
            else:
                scope_targets["@scoped"].append(link_targets[-1])

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/@scoped+b@0.0.0".format(name),
            src = "//projects/b:pkg",
            package = "@scoped/b",
            version = "0.0.0",
            deps = {
                "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+a@0.0.0".format(name): "@scoped/a",
            },
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/@scoped/b".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+b@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/@scoped/b/dir".format(name),
                srcs = [":{}/@scoped/b".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/@scoped/b".format(name))
            if "@scoped" not in scope_targets:
                scope_targets["@scoped"] = [link_targets[-1]]
            else:
                scope_targets["@scoped"].append(link_targets[-1])

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/@scoped+d@0.0.0".format(name),
            src = "//projects/d:pkg",
            package = "@scoped/d",
            version = "0.0.0",
            deps = {
                "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+a@0.0.0".format(name): "@scoped/a",
            },
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/@scoped/d".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+d@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/@scoped/d/dir".format(name),
                srcs = [":{}/@scoped/d".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/@scoped/d".format(name))
            if "@scoped" not in scope_targets:
                scope_targets["@scoped"] = [link_targets[-1]]
            else:
                scope_targets["@scoped"].append(link_targets[-1])

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/scoped+bad@0.0.0".format(name),
            src = "//projects/b:pkg",
            package = "scoped/bad",
            version = "0.0.0",
            deps = {
                "//<LOCKVERSION>:.aspect_rules_js/{}/@scoped+a@0.0.0".format(name): "@scoped/a",
            },
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/scoped/bad".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/scoped+bad@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/scoped/bad/dir".format(name),
                srcs = [":{}/scoped/bad".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/scoped/bad".format(name))

    if is_root:
        _npm_package_store(
            name = ".aspect_rules_js/{}/a-types@0.0.0".format(name),
            src = "//projects/a-types:pkg",
            package = "a-types",
            version = "0.0.0",
            deps = {
                "//<LOCKVERSION>:.aspect_rules_js/{}/@types+node@16.18.11".format(name): "@types/node",
            },
            visibility = ["//visibility:public"],
            tags = ["manual"],
        )

    for link_package in ["projects/b"]:
        if link_package == bazel_package:
            # terminal target for direct dependencies
            _npm_link_package_store(
                name = "{}/a-types".format(name),
                src = "//<LOCKVERSION>:.aspect_rules_js/{}/a-types@0.0.0".format(name),
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )

            # filegroup target that provides a single file which is
            # package directory for use in $(execpath) and $(rootpath)
            native.filegroup(
                name = "{}/a-types/dir".format(name),
                srcs = [":{}/a-types".format(name)],
                output_group = "package_directory",
                visibility = ["//visibility:public"],
                tags = ["manual"],
            )
            link_targets.append(":{}/a-types".format(name))

    for scope, scoped_targets in scope_targets.items():
        _js_library(
            name = "{}/{}".format(name, scope),
            srcs = scoped_targets,
            tags = ["manual"],
            visibility = ["//visibility:public"],
        )

    _js_library(
        name = name,
        srcs = link_targets,
        tags = ["manual"],
        visibility = ["//visibility:public"],
    )

# buildifier: disable=function-docstring
def npm_link_targets(name = "node_modules", package = None):
    bazel_package = package if package != None else native.package_name()
    link = bazel_package in _LINK_PACKAGES

    link_targets = []

    if link:
        if bazel_package == "<LOCKVERSION>":
            link_targets.append("//{}:{}/@aspect-test-a-bad-scope".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test-custom-scope/a".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test/a".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test/a2".format(bazel_package, name))
            link_targets.append("//{}:{}/aspect-test-a-no-scope".format(bazel_package, name))
            link_targets.append("//{}:{}/aspect-test-a/no-at".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test/b".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test/c".format(bazel_package, name))
            link_targets.append("//{}:{}/@aspect-test/e".format(bazel_package, name))
            link_targets.append("//{}:{}/jsonify".format(bazel_package, name))
            link_targets.append("//{}:{}/@isaacs/cliui".format(bazel_package, name))
            link_targets.append("//{}:{}/rollup-plugin-with-peers".format(bazel_package, name))
            link_targets.append("//{}:{}/@types/archiver".format(bazel_package, name))
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))
            link_targets.append("//{}:{}/alias-types-node".format(bazel_package, name))
            link_targets.append("//{}:{}/alias-only-sizzle".format(bazel_package, name))
            link_targets.append("//{}:{}/debug".format(bazel_package, name))
            link_targets.append("//{}:{}/hello".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd-v0".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd-v1".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd-v2".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd-v3".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd".format(bazel_package, name))
            link_targets.append("//{}:{}/is-odd-alias".format(bazel_package, name))
            link_targets.append("//{}:{}/jquery-git-ssh-e61fccb".format(bazel_package, name))
            link_targets.append("//{}:{}/meaning-of-life".format(bazel_package, name))
            link_targets.append("//{}:{}/rollup".format(bazel_package, name))
            link_targets.append("//{}:{}/rollup3".format(bazel_package, name))
            link_targets.append("//{}:{}/tslib".format(bazel_package, name))
            link_targets.append("//{}:{}/typescript".format(bazel_package, name))
            link_targets.append("//{}:{}/uvu".format(bazel_package, name))
        elif bazel_package == "projects/a-types":
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))
        elif bazel_package == "projects/b":
            link_targets.append("//{}:{}/@types/node".format(bazel_package, name))

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/@scoped/c".format(bazel_package, name))

    for link_package in ["<LOCKVERSION>", "projects/b", "projects/c", "projects/d", "projects/peers"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/@scoped/a".format(bazel_package, name))

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/@scoped/b".format(bazel_package, name))

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/@scoped/d".format(bazel_package, name))

    for link_package in ["<LOCKVERSION>"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/scoped/bad".format(bazel_package, name))

    for link_package in ["projects/b"]:
        if link_package == bazel_package:
            link_targets.append("//{}:{}/a-types".format(bazel_package, name))
    return link_targets
