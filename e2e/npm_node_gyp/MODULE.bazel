bazel_dep(name = "aspect_rules_js", version = "0.0.0", dev_dependency = True)
local_path_override(
    module_name = "aspect_rules_js",
    path = "../..",
)

# bazel_dep(name = "aspect_bazel_lib", version = "2.9.0", dev_dependency = True)

# # TODO: upgrade and remove override to include d042d563c6a91f7e11f66c42c83429199bd3d5d9
# archive_override(
#     module_name = "aspect_bazel_lib",
#     integrity = "sha256-iboa/H1J/MVDaY1OC/Ev0FUbu6SovyimC1cTkVmBC/c=",
#     strip_prefix = "bazel-lib-d042d563c6a91f7e11f66c42c83429199bd3d5d9",
#     urls = ["https://github.com/bazel-contrib/bazel-lib/archive/d042d563c6a91f7e11f66c42c83429199bd3d5d9.tar.gz"],
# )

# bazel_dep(name = "bazel_skylib", version = "1.5.0", dev_dependency = True)
# bazel_dep(name = "platforms", version = "0.0.10", dev_dependency = True)

npm = use_extension(
    "@aspect_rules_js//npm:extensions.bzl",
    "npm",
    dev_dependency = True,
)
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Choose a different version of pnpm - note that only the "root" module may do this,
# not some transitive dependency.
pnpm.pnpm(
    name = "pnpm",
    pnpm_version = "8.15.2",
)

# Allows developers to run the identical version of pnpm for local workflows like
# bazel run -- @pnpm --dir $PWD install
use_repo(pnpm, "pnpm")
