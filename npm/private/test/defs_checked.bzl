"@generated by @aspect_rules_js//npm/private:npm_translate_lock.bzl from pnpm lock file @//:pnpm-lock.yaml"

# buildifier: disable=bzl-visibility
load("@aspect_rules_js//npm/private:npm_linked_packages.bzl", "npm_linked_packages")
load("@npm__at_aspect-test_a__5.0.0__links//:defs.bzl", link_0 = "npm_link_package")
load("@npm__at_aspect-test_b__5.0.0__links//:defs.bzl", link_1 = "npm_link_package")
load("@npm__at_aspect-test_c__1.0.0__links//:defs.bzl", link_2 = "npm_link_package")
load("@npm__at_aspect-test_c__2.0.0__links//:defs.bzl", link_3 = "npm_link_package")
load("@npm__at_aspect-test_d__2.0.0__at_aspect-test_c_1.0.0__links//:defs.bzl", link_4 = "npm_link_package")
load("@npm__at_aspect-test_d__2.0.0__at_aspect-test_c_2.0.0__links//:defs.bzl", link_5 = "npm_link_package")
load("@npm__at_gregmagolan_test-a__0.0.1__links//:defs.bzl", link_6 = "npm_link_package")
load("@npm__at_gregmagolan_test-b__0.0.2__links//:defs.bzl", link_7 = "npm_link_package")
load("@npm__at_polka_url__1.0.0-next.21__links//:defs.bzl", link_8 = "npm_link_package")
load("@npm__at_rollup_plugin-commonjs__21.1.0__rollup_2.70.2__links//:defs.bzl", link_9 = "npm_link_package")
load("@npm__at_rollup_pluginutils__3.1.0__rollup_2.70.2__links//:defs.bzl", link_10 = "npm_link_package")
load("@npm__at_types_estree__0.0.39__links//:defs.bzl", link_11 = "npm_link_package")
load("@npm__at_types_estree__0.0.51__links//:defs.bzl", link_12 = "npm_link_package")
load("@npm__at_types_node__16.11.36__links//:defs.bzl", link_13 = "npm_link_package")
load("@npm__at_ungap_promise-all-settled__1.1.2__links//:defs.bzl", link_14 = "npm_link_package")
load("@npm__acorn-walk__8.2.0__links//:defs.bzl", link_15 = "npm_link_package")
load("@npm__acorn__8.7.1__links//:defs.bzl", link_16 = "npm_link_package")
load("@npm__ansi-colors__4.1.1__links//:defs.bzl", link_17 = "npm_link_package")
load("@npm__ansi-regex__5.0.1__links//:defs.bzl", link_18 = "npm_link_package")
load("@npm__ansi-styles__4.3.0__links//:defs.bzl", link_19 = "npm_link_package")
load("@npm__anymatch__3.1.2__links//:defs.bzl", link_20 = "npm_link_package")
load("@npm__argparse__2.0.1__links//:defs.bzl", link_21 = "npm_link_package")
load("@npm__balanced-match__1.0.2__links//:defs.bzl", link_22 = "npm_link_package")
load("@npm__binary-extensions__2.2.0__links//:defs.bzl", link_23 = "npm_link_package")
load("@npm__brace-expansion__1.1.11__links//:defs.bzl", link_24 = "npm_link_package")
load("@npm__brace-expansion__2.0.1__links//:defs.bzl", link_25 = "npm_link_package")
load("@npm__braces__3.0.2__links//:defs.bzl", link_26 = "npm_link_package")
load("@npm__browser-stdout__1.3.1__links//:defs.bzl", link_27 = "npm_link_package")
load("@npm__bufferutil__4.0.1__links//:defs.bzl", link_28 = "npm_link_package")
load("@npm__camelcase__6.3.0__links//:defs.bzl", link_29 = "npm_link_package")
load("@npm__chalk__4.1.2__links//:defs.bzl", link_30 = "npm_link_package")
load("@npm__charenc__0.0.2__links//:defs.bzl", link_31 = "npm_link_package")
load("@npm__chokidar__3.5.3__links//:defs.bzl", link_32 = "npm_link_package")
load("@npm__cliui__7.0.4__links//:defs.bzl", link_33 = "npm_link_package")
load("@npm__color-convert__2.0.1__links//:defs.bzl", link_34 = "npm_link_package")
load("@npm__color-name__1.1.4__links//:defs.bzl", link_35 = "npm_link_package")
load("@npm__commander__7.2.0__links//:defs.bzl", link_36 = "npm_link_package")
load("@npm__commondir__1.0.1__links//:defs.bzl", link_37 = "npm_link_package")
load("@npm__concat-map__0.0.1__links//:defs.bzl", link_38 = "npm_link_package")
load("@npm__crypt__0.0.2__links//:defs.bzl", link_39 = "npm_link_package")
load("@npm__debug__2.6.9__links//:defs.bzl", link_40 = "npm_link_package")
load("@npm__debug__4.3.4__links//:defs.bzl", link_41 = "npm_link_package")
load("@npm__debug__4.3.4__supports-color_8.1.1__links//:defs.bzl", link_42 = "npm_link_package")
load("@npm__decamelize__4.0.0__links//:defs.bzl", link_43 = "npm_link_package")
load("@npm__dequal__2.0.2__links//:defs.bzl", link_44 = "npm_link_package")
load("@npm__diff__5.0.0__links//:defs.bzl", link_45 = "npm_link_package")
load("@npm__diff__5.1.0__links//:defs.bzl", link_46 = "npm_link_package")
load("@npm__duplexer__0.1.2__links//:defs.bzl", link_47 = "npm_link_package")
load("@npm__emoji-regex__8.0.0__links//:defs.bzl", link_48 = "npm_link_package")
load("@npm__esbuild-android-64__0.14.38__links//:defs.bzl", link_49 = "npm_link_package")
load("@npm__esbuild-android-arm64__0.14.38__links//:defs.bzl", link_50 = "npm_link_package")
load("@npm__esbuild-darwin-64__0.14.38__links//:defs.bzl", link_51 = "npm_link_package")
load("@npm__esbuild-darwin-arm64__0.14.38__links//:defs.bzl", link_52 = "npm_link_package")
load("@npm__esbuild-freebsd-64__0.14.38__links//:defs.bzl", link_53 = "npm_link_package")
load("@npm__esbuild-freebsd-arm64__0.14.38__links//:defs.bzl", link_54 = "npm_link_package")
load("@npm__esbuild-linux-32__0.14.38__links//:defs.bzl", link_55 = "npm_link_package")
load("@npm__esbuild-linux-64__0.14.38__links//:defs.bzl", link_56 = "npm_link_package")
load("@npm__esbuild-linux-arm__0.14.38__links//:defs.bzl", link_57 = "npm_link_package")
load("@npm__esbuild-linux-arm64__0.14.38__links//:defs.bzl", link_58 = "npm_link_package")
load("@npm__esbuild-linux-mips64le__0.14.38__links//:defs.bzl", link_59 = "npm_link_package")
load("@npm__esbuild-linux-ppc64le__0.14.38__links//:defs.bzl", link_60 = "npm_link_package")
load("@npm__esbuild-linux-riscv64__0.14.38__links//:defs.bzl", link_61 = "npm_link_package")
load("@npm__esbuild-linux-s390x__0.14.38__links//:defs.bzl", link_62 = "npm_link_package")
load("@npm__esbuild-netbsd-64__0.14.38__links//:defs.bzl", link_63 = "npm_link_package")
load("@npm__esbuild-openbsd-64__0.14.38__links//:defs.bzl", link_64 = "npm_link_package")
load("@npm__esbuild-sunos-64__0.14.38__links//:defs.bzl", link_65 = "npm_link_package")
load("@npm__esbuild-windows-32__0.14.38__links//:defs.bzl", link_66 = "npm_link_package")
load("@npm__esbuild-windows-64__0.14.38__links//:defs.bzl", link_67 = "npm_link_package")
load("@npm__esbuild-windows-arm64__0.14.38__links//:defs.bzl", link_68 = "npm_link_package")
load("@npm__esbuild__0.14.38__links//:defs.bzl", link_69 = "npm_link_package")
load("@npm__escalade__3.1.1__links//:defs.bzl", link_70 = "npm_link_package")
load("@npm__escape-string-regexp__4.0.0__links//:defs.bzl", link_71 = "npm_link_package")
load("@npm__esprima__1.0.0__links//:defs.bzl", link_72 = "npm_link_package")
load("@npm__estree-walker__1.0.1__links//:defs.bzl", link_73 = "npm_link_package")
load("@npm__estree-walker__2.0.2__links//:defs.bzl", link_74 = "npm_link_package")
load("@npm__fill-range__7.0.1__links//:defs.bzl", link_75 = "npm_link_package")
load("@npm__find-up__5.0.0__links//:defs.bzl", link_76 = "npm_link_package")
load("@npm__flat__5.0.2__links//:defs.bzl", link_77 = "npm_link_package")
load("@npm__fs.realpath__1.0.0__links//:defs.bzl", link_78 = "npm_link_package")
load("@npm__fsevents__2.3.2__links//:defs.bzl", link_79 = "npm_link_package")
load("@npm__function-bind__1.1.1__links//:defs.bzl", link_80 = "npm_link_package")
load("@npm__get-caller-file__2.0.5__links//:defs.bzl", link_81 = "npm_link_package")
load("@npm__glob-parent__5.1.2__links//:defs.bzl", link_82 = "npm_link_package")
load("@npm__glob__7.2.0__links//:defs.bzl", link_83 = "npm_link_package")
load("@npm__glob__7.2.3__links//:defs.bzl", link_84 = "npm_link_package")
load("@npm__gzip-size__6.0.0__links//:defs.bzl", link_85 = "npm_link_package")
load("@npm__has-flag__4.0.0__links//:defs.bzl", link_86 = "npm_link_package")
load("@npm__has__1.0.3__links//:defs.bzl", link_87 = "npm_link_package")
load("@npm__he__1.2.0__links//:defs.bzl", link_88 = "npm_link_package")
load("@npm__inflight__1.0.6__links//:defs.bzl", link_89 = "npm_link_package")
load("@npm__inherits__2.0.4__links//:defs.bzl", link_90 = "npm_link_package")
load("@npm__is-binary-path__2.1.0__links//:defs.bzl", link_91 = "npm_link_package")
load("@npm__is-buffer__1.1.6__links//:defs.bzl", link_92 = "npm_link_package")
load("@npm__is-core-module__2.9.0__links//:defs.bzl", link_93 = "npm_link_package")
load("@npm__is-extglob__2.1.1__links//:defs.bzl", link_94 = "npm_link_package")
load("@npm__is-fullwidth-code-point__3.0.0__links//:defs.bzl", link_95 = "npm_link_package")
load("@npm__is-glob__4.0.3__links//:defs.bzl", link_96 = "npm_link_package")
load("@npm__is-number__7.0.0__links//:defs.bzl", link_97 = "npm_link_package")
load("@npm__is-plain-obj__2.1.0__links//:defs.bzl", link_98 = "npm_link_package")
load("@npm__is-reference__1.2.1__links//:defs.bzl", link_99 = "npm_link_package")
load("@npm__is-unicode-supported__0.1.0__links//:defs.bzl", link_100 = "npm_link_package")
load("@npm__js-tokens__4.0.0__links//:defs.bzl", link_101 = "npm_link_package")
load("@npm__js-yaml__4.1.0__links//:defs.bzl", link_102 = "npm_link_package")
load("@npm__kleur__4.1.4__links//:defs.bzl", link_103 = "npm_link_package")
load("@npm__locate-path__6.0.0__links//:defs.bzl", link_104 = "npm_link_package")
load("@npm__lodash__4.17.21__links//:defs.bzl", link_105 = "npm_link_package")
load("@npm__log-symbols__4.1.0__links//:defs.bzl", link_106 = "npm_link_package")
load("@npm__loose-envify__1.4.0__links//:defs.bzl", link_107 = "npm_link_package")
load("@npm__magic-string__0.25.9__links//:defs.bzl", link_108 = "npm_link_package")
load("@npm__md5__2.3.0__links//:defs.bzl", link_109 = "npm_link_package")
load("@npm__minimatch__3.1.2__links//:defs.bzl", link_110 = "npm_link_package")
load("@npm__minimatch__5.0.1__links//:defs.bzl", link_111 = "npm_link_package")
load("@npm__minimist__0.0.10__links//:defs.bzl", link_112 = "npm_link_package")
load("@npm__minimist__1.2.6__links//:defs.bzl", link_113 = "npm_link_package")
load("@npm__mkdirp__0.5.6__links//:defs.bzl", link_114 = "npm_link_package")
load("@npm__mobx-react-lite__3.4.0__mobx_6.3.0_react_17.0.2__links//:defs.bzl", link_115 = "npm_link_package")
load("@npm__mobx-react__7.3.0__mobx_6.3.0_react_17.0.2__links//:defs.bzl", link_116 = "npm_link_package")
load("@npm__mobx__6.3.0__links//:defs.bzl", link_117 = "npm_link_package")
load("@npm__mocha-junit-reporter__2.0.2__mocha_10.0.0__links//:defs.bzl", link_118 = "npm_link_package")
load("@npm__mocha-multi-reporters__1.5.1__mocha_10.0.0__links//:defs.bzl", link_119 = "npm_link_package")
load("@npm__mocha__10.0.0__th2rfume6p4m5jxelm27wrhnly__links//:defs.bzl", link_120 = "npm_link_package")
load("@npm__mri__1.2.0__links//:defs.bzl", link_121 = "npm_link_package")
load("@npm__mrmime__1.0.0__links//:defs.bzl", link_122 = "npm_link_package")
load("@npm__ms__2.0.0__links//:defs.bzl", link_123 = "npm_link_package")
load("@npm__ms__2.1.2__links//:defs.bzl", link_124 = "npm_link_package")
load("@npm__ms__2.1.3__links//:defs.bzl", link_125 = "npm_link_package")
load("@npm__nanoid__3.3.3__links//:defs.bzl", link_126 = "npm_link_package")
load("@npm__node-gyp-build__3.7.0__links//:defs.bzl", link_127 = "npm_link_package")
load("@npm__normalize-path__3.0.0__links//:defs.bzl", link_128 = "npm_link_package")
load("@npm__object-assign__4.1.1__links//:defs.bzl", link_129 = "npm_link_package")
load("@npm__once__1.4.0__links//:defs.bzl", link_130 = "npm_link_package")
load("@npm__opener__1.5.2__links//:defs.bzl", link_131 = "npm_link_package")
load("@npm__optimist__0.6.0__links//:defs.bzl", link_132 = "npm_link_package")
load("@npm__p-limit__3.1.0__links//:defs.bzl", link_133 = "npm_link_package")
load("@npm__p-locate__5.0.0__links//:defs.bzl", link_134 = "npm_link_package")
load("@npm__path-exists__4.0.0__links//:defs.bzl", link_135 = "npm_link_package")
load("@npm__path-is-absolute__1.0.1__links//:defs.bzl", link_136 = "npm_link_package")
load("@npm__path-parse__1.0.7__links//:defs.bzl", link_137 = "npm_link_package")
load("@npm__picomatch__2.3.1__links//:defs.bzl", link_138 = "npm_link_package")
load("@npm__randombytes__2.1.0__links//:defs.bzl", link_139 = "npm_link_package")
load("@npm__react__17.0.2__links//:defs.bzl", link_140 = "npm_link_package")
load("@npm__readdirp__3.6.0__links//:defs.bzl", link_141 = "npm_link_package")
load("@npm__require-directory__2.1.1__links//:defs.bzl", link_142 = "npm_link_package")
load("@npm__resolve__1.22.0__links//:defs.bzl", link_143 = "npm_link_package")
load("@npm__rollup__2.70.2__links//:defs.bzl", link_144 = "npm_link_package")
load("@npm__sade__1.8.1__links//:defs.bzl", link_145 = "npm_link_package")
load("@npm__safe-buffer__5.2.1__links//:defs.bzl", link_146 = "npm_link_package")
load("@npm__serialize-javascript__6.0.0__links//:defs.bzl", link_147 = "npm_link_package")
load("@npm__sirv__1.0.19__links//:defs.bzl", link_148 = "npm_link_package")
load("@npm__sourcemap-codec__1.4.8__links//:defs.bzl", link_149 = "npm_link_package")
load("@npm__string-width__4.2.3__links//:defs.bzl", link_150 = "npm_link_package")
load("@npm__strip-ansi__6.0.1__links//:defs.bzl", link_151 = "npm_link_package")
load("@npm__strip-json-comments__3.1.1__links//:defs.bzl", link_152 = "npm_link_package")
load("@npm__supports-color__7.2.0__links//:defs.bzl", link_153 = "npm_link_package")
load("@npm__supports-color__8.1.1__links//:defs.bzl", link_154 = "npm_link_package")
load("@npm__supports-preserve-symlinks-flag__1.0.0__links//:defs.bzl", link_155 = "npm_link_package")
load("@npm__to-regex-range__5.0.1__links//:defs.bzl", link_156 = "npm_link_package")
load("@npm__totalist__1.1.0__links//:defs.bzl", link_157 = "npm_link_package")
load("@npm__typescript__4.7.2__links//:defs.bzl", link_158 = "npm_link_package")
load("@npm__unused__0.2.2__links//:defs.bzl", link_159 = "npm_link_package")
load("@npm__uvu__0.5.3__links//:defs.bzl", link_160 = "npm_link_package")
load("@npm__webpack-bundle-analyzer__4.5.0__bufferutil_4.0.1__links//:defs.bzl", link_161 = "npm_link_package")
load("@npm__wordwrap__0.0.3__links//:defs.bzl", link_162 = "npm_link_package")
load("@npm__workerpool__6.2.1__links//:defs.bzl", link_163 = "npm_link_package")
load("@npm__wrap-ansi__7.0.0__links//:defs.bzl", link_164 = "npm_link_package")
load("@npm__wrappy__1.0.2__links//:defs.bzl", link_165 = "npm_link_package")
load("@npm__ws__7.5.8__bufferutil_4.0.1__links//:defs.bzl", link_166 = "npm_link_package")
load("@npm__xml__1.0.1__links//:defs.bzl", link_167 = "npm_link_package")
load("@npm__y18n__5.0.8__links//:defs.bzl", link_168 = "npm_link_package")
load("@npm__yargs-parser__20.2.4__links//:defs.bzl", link_169 = "npm_link_package")
load("@npm__yargs-unparser__2.0.0__links//:defs.bzl", link_170 = "npm_link_package")
load("@npm__yargs__16.2.0__links//:defs.bzl", link_171 = "npm_link_package")
load("@npm__yocto-queue__0.1.0__links//:defs.bzl", link_172 = "npm_link_package")

def npm_link_all_packages(name = "node_modules"):
    """Generated list of npm_link_package() target generators and first-party linked packages corresponding to the packages in @//:pnpm-lock.yaml

    Args:
        name: name of catch all target to generate for all packages linked
    """
    root_package = ""
    link_packages = ["", "examples/lib", "examples/macro", "examples/npm_deps", "npm/private/test"]
    is_root = native.package_name() == root_package
    is_direct = native.package_name() in link_packages
    if not is_root and not is_direct:
        msg = "The npm_link_all_packages() macro loaded from @npm//:defs.bzl and called in bazel package '%s' may only be called in the bazel package(s) corresponding to the root package '' and packages ['', 'examples/lib', 'examples/macro', 'examples/npm_deps', 'npm/private/test']" % native.package_name()
        fail(msg)
    direct_targets = []
    scoped_direct_targets = {}

    scoped_direct_targets["@aspect-test"] = []
    scoped_direct_targets["@gregmagolan"] = []
    scoped_direct_targets["@polka"] = []
    scoped_direct_targets["@rollup"] = []
    scoped_direct_targets["@types"] = []
    scoped_direct_targets["@ungap"] = []
    direct_targets.append(link_0(name = "{}/@aspect-test/a".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_1(name = "{}/@aspect-test/b".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_2(name = "{}/@aspect-test/c".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_3(name = "{}/@aspect-test/c".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_4(name = "{}/@aspect-test/d".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_5(name = "{}/@aspect-test/d".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@aspect-test"].append(direct_targets[-1])
    direct_targets.append(link_6(name = "{}/@gregmagolan/test-a".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@gregmagolan"].append(direct_targets[-1])
    direct_targets.append(link_7(name = "{}/@gregmagolan/test-b".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@gregmagolan"].append(direct_targets[-1])
    direct_targets.append(link_8(name = "{}/@polka/url".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@polka"].append(direct_targets[-1])
    direct_targets.append(link_9(name = "{}/@rollup/plugin-commonjs".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@rollup"].append(direct_targets[-1])
    direct_targets.append(link_10(name = "{}/@rollup/pluginutils".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@rollup"].append(direct_targets[-1])
    direct_targets.append(link_11(name = "{}/@types/estree".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@types"].append(direct_targets[-1])
    direct_targets.append(link_12(name = "{}/@types/estree".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@types"].append(direct_targets[-1])
    direct_targets.append(link_13(name = "{}/@types/node".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@types"].append(direct_targets[-1])
    direct_targets.append(link_14(name = "{}/@ungap/promise-all-settled".format(name), direct = None, fail_if_no_link = False))
    scoped_direct_targets["@ungap"].append(direct_targets[-1])
    direct_targets.append(link_15(name = "{}/acorn-walk".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_16(name = "{}/acorn".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_17(name = "{}/ansi-colors".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_18(name = "{}/ansi-regex".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_19(name = "{}/ansi-styles".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_20(name = "{}/anymatch".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_21(name = "{}/argparse".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_22(name = "{}/balanced-match".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_23(name = "{}/binary-extensions".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_24(name = "{}/brace-expansion".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_25(name = "{}/brace-expansion".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_26(name = "{}/braces".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_27(name = "{}/browser-stdout".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_28(name = "{}/bufferutil".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_29(name = "{}/camelcase".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_30(name = "{}/chalk".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_31(name = "{}/charenc".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_32(name = "{}/chokidar".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_33(name = "{}/cliui".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_34(name = "{}/color-convert".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_35(name = "{}/color-name".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_36(name = "{}/commander".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_37(name = "{}/commondir".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_38(name = "{}/concat-map".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_39(name = "{}/crypt".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_40(name = "{}/debug".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_41(name = "{}/debug".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_42(name = "{}/debug".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_43(name = "{}/decamelize".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_44(name = "{}/dequal".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_45(name = "{}/diff".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_46(name = "{}/diff".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_47(name = "{}/duplexer".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_48(name = "{}/emoji-regex".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_49(name = "{}/esbuild-android-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_50(name = "{}/esbuild-android-arm64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_51(name = "{}/esbuild-darwin-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_52(name = "{}/esbuild-darwin-arm64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_53(name = "{}/esbuild-freebsd-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_54(name = "{}/esbuild-freebsd-arm64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_55(name = "{}/esbuild-linux-32".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_56(name = "{}/esbuild-linux-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_57(name = "{}/esbuild-linux-arm".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_58(name = "{}/esbuild-linux-arm64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_59(name = "{}/esbuild-linux-mips64le".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_60(name = "{}/esbuild-linux-ppc64le".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_61(name = "{}/esbuild-linux-riscv64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_62(name = "{}/esbuild-linux-s390x".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_63(name = "{}/esbuild-netbsd-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_64(name = "{}/esbuild-openbsd-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_65(name = "{}/esbuild-sunos-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_66(name = "{}/esbuild-windows-32".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_67(name = "{}/esbuild-windows-64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_68(name = "{}/esbuild-windows-arm64".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_69(name = "{}/esbuild".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_70(name = "{}/escalade".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_71(name = "{}/escape-string-regexp".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_72(name = "{}/esprima".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_73(name = "{}/estree-walker".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_74(name = "{}/estree-walker".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_75(name = "{}/fill-range".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_76(name = "{}/find-up".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_77(name = "{}/flat".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_78(name = "{}/fs.realpath".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_79(name = "{}/fsevents".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_80(name = "{}/function-bind".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_81(name = "{}/get-caller-file".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_82(name = "{}/glob-parent".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_83(name = "{}/glob".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_84(name = "{}/glob".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_85(name = "{}/gzip-size".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_86(name = "{}/has-flag".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_87(name = "{}/has".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_88(name = "{}/he".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_89(name = "{}/inflight".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_90(name = "{}/inherits".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_91(name = "{}/is-binary-path".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_92(name = "{}/is-buffer".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_93(name = "{}/is-core-module".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_94(name = "{}/is-extglob".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_95(name = "{}/is-fullwidth-code-point".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_96(name = "{}/is-glob".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_97(name = "{}/is-number".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_98(name = "{}/is-plain-obj".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_99(name = "{}/is-reference".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_100(name = "{}/is-unicode-supported".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_101(name = "{}/js-tokens".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_102(name = "{}/js-yaml".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_103(name = "{}/kleur".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_104(name = "{}/locate-path".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_105(name = "{}/lodash".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_106(name = "{}/log-symbols".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_107(name = "{}/loose-envify".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_108(name = "{}/magic-string".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_109(name = "{}/md5".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_110(name = "{}/minimatch".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_111(name = "{}/minimatch".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_112(name = "{}/minimist".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_113(name = "{}/minimist".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_114(name = "{}/mkdirp".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_115(name = "{}/mobx-react-lite".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_116(name = "{}/mobx-react".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_117(name = "{}/mobx".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_118(name = "{}/mocha-junit-reporter".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_119(name = "{}/mocha-multi-reporters".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_120(name = "{}/mocha".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_121(name = "{}/mri".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_122(name = "{}/mrmime".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_123(name = "{}/ms".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_124(name = "{}/ms".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_125(name = "{}/ms".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_126(name = "{}/nanoid".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_127(name = "{}/node-gyp-build".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_128(name = "{}/normalize-path".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_129(name = "{}/object-assign".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_130(name = "{}/once".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_131(name = "{}/opener".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_132(name = "{}/optimist".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_133(name = "{}/p-limit".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_134(name = "{}/p-locate".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_135(name = "{}/path-exists".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_136(name = "{}/path-is-absolute".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_137(name = "{}/path-parse".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_138(name = "{}/picomatch".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_139(name = "{}/randombytes".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_140(name = "{}/react".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_141(name = "{}/readdirp".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_142(name = "{}/require-directory".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_143(name = "{}/resolve".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_144(name = "{}/rollup".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_145(name = "{}/sade".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_146(name = "{}/safe-buffer".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_147(name = "{}/serialize-javascript".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_148(name = "{}/sirv".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_149(name = "{}/sourcemap-codec".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_150(name = "{}/string-width".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_151(name = "{}/strip-ansi".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_152(name = "{}/strip-json-comments".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_153(name = "{}/supports-color".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_154(name = "{}/supports-color".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_155(name = "{}/supports-preserve-symlinks-flag".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_156(name = "{}/to-regex-range".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_157(name = "{}/totalist".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_158(name = "{}/typescript".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_159(name = "{}/unused".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_160(name = "{}/uvu".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_161(name = "{}/webpack-bundle-analyzer".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_162(name = "{}/wordwrap".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_163(name = "{}/workerpool".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_164(name = "{}/wrap-ansi".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_165(name = "{}/wrappy".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_166(name = "{}/ws".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_167(name = "{}/xml".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_168(name = "{}/y18n".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_169(name = "{}/yargs-parser".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_170(name = "{}/yargs-unparser".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_171(name = "{}/yargs".format(name), direct = None, fail_if_no_link = False))
    direct_targets.append(link_172(name = "{}/yocto-queue".format(name), direct = None, fail_if_no_link = False))

    for scope, scoped_targets in scoped_direct_targets.items():
        direct_scoped_targets = [t for t in scoped_targets if t]
        if direct_scoped_targets:
            npm_linked_packages(
                name = "{}/{}".format(name, scope),
                srcs = direct_scoped_targets,
                tags = ["manual"],
                visibility = ["//visibility:public"],
            )

    npm_linked_packages(
        name = name,
        srcs = [t for t in direct_targets if t],
        tags = ["manual"],
        visibility = ["//visibility:public"],
    )
