"""
js_binary examples

Simple examples of running JS programs in node with js_binary, js_run_binary, and js_test.
"""

load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary", "js_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//examples/npm_deps/@aspect-test/a:package_json.bzl", aspect_test_a_bin = "bin")

# A simple program that runs the Acorn JS parser to produce an AST
js_binary(
    name = "bin",
    # Reference the location where the acorn npm module was linked in the root Bazel package
    data = ["//:node_modules/acorn"],
    entry_point = "require_acorn.js",
)

####################################################
# Use case 1
# js_binary can be used with genrule
# because everything it needs to run is in the runfiles
genrule(
    name = "run1",
    srcs = [],
    outs = ["out1"],
    # All js_binary rules need a BAZEL_BINDIR environment variable set so they can
    # run from that directory as the working directory.
    cmd = "BAZEL_BINDIR=$(BINDIR) $(location :bin) {}/out1".format(package_name()),
    tools = [":bin"],
)

####################################################
# Use case 2
# Using js_run_binary has some nice syntax sugar vs.
# a genrule() or the run_binary rule from bazel-skylib.

js_run_binary(
    name = "run2",
    srcs = [],
    outs = ["out2"],
    args = ["out2"],
    chdir = package_name(),
    # Request that the rules_js launcher prints extra information
    log_level = "debug",
    tool = ":bin",
    # Uncomment the setting below to see debug output even on a
    # successful run of the build action.
    # silent_on_success = False,
)

diff_test(
    name = "test_js_binary_under_js_run_binary",
    file1 = "//examples:expected_one_ast.json",
    file2 = "out2",
)

################################
# Use case 3
# js_test is just a js_binary
# Bazel will check the exit code: a zero means the test passes, anything else means it fails.

js_test(
    name = "test_test",
    data = ["//:node_modules/@types/node"],
    entry_point = "test.js",
)

###############################
# Use case 4
# A first-party library which we want to run as a program.
# This relies on a `require("@mycorp/mylib")` which is a package within this monorepo.

write_file(
    name = "write4",
    out = "case4.js",
    content = [
        """require('fs').writeFileSync(
            process.argv[2],
            require("@mycorp/mylib").toAst("1")
        )""",
    ],
)

js_binary(
    name = "bin4",
    # To resolve the require() statement, we supply the location where our local monorepo
    # npm package was linked into the node_modules in the root Bazel package.
    data = ["//:node_modules/@mycorp/mylib"],
    entry_point = "case4.js",
)

js_run_binary(
    name = "run4",
    outs = ["out4"],
    args = ["out4"],
    chdir = package_name(),
    tool = ":bin4",
)

diff_test(
    name = "test4",
    file1 = "//examples:expected_one_ast.json",
    file2 = "out4",
)

#######################################
# Use case 5
# js_run_binary that reads a data file at runtime.

write_file(
    name = "write5",
    out = "case5.js",
    content = ["""\
require('fs').writeFileSync(
    process.argv[2],
    JSON.stringify(require(require('path').join(process.cwd(), "data.json")))
)"""],
)

write_file(
    name = "expected5",
    out = "expected5.txt",
    content = ["{\"answer\":42}"],
)

js_binary(
    name = "bin5",
    entry_point = "case5.js",
)

js_run_binary(
    name = "run5",
    srcs = ["data.json"],
    outs = ["out5"],
    args = ["out5"],
    chdir = package_name(),
    tool = ":bin5",
)

diff_test(
    name = "test5",
    file1 = "expected5",
    file2 = "out5",
)

#######################################
# Use case 6
# A program that relies on environment variables and node_options

write_file(
    name = "write6",
    out = "case6.js",
    content = ["require('fs').writeFileSync(process.argv[2], process.env.NODE_ENV + ' ' + process.title)"],
)

write_file(
    name = "expected6",
    out = "expected6.txt",
    content = ["production myapp"],
)

js_binary(
    name = "bin6",
    entry_point = "case6.js",
    env = {
        "NODE_ENV": "production",
    },
    node_options = [
        "--title=myapp",
        "--throw-deprecation",
    ],
)

js_run_binary(
    name = "run6",
    outs = ["out6"],
    args = ["../../../$@"],
    tool = ":bin6",
)

diff_test(
    name = "test6",
    file1 = "expected6",
    file2 = "out6",
)

#######################################
# Use case 7
# capture stdout, stderr & exit code

write_file(
    name = "write7",
    out = "case7.js",
    content = ["""\
process.stdout.write("to stdout\\n")
process.stderr.write("to stderr\\n")
process.exit(42)
"""],
)

js_binary(
    name = "bin7",
    entry_point = "case7.js",
)

js_run_binary(
    name = "run7",
    outs = [],
    chdir = package_name(),
    exit_code_out = "actual_exitcode",
    stderr = "actual_stderr",
    stdout = "actual_stdout",
    tool = ":bin7",
)

write_file(
    name = "expected_stdout",
    out = "expected_stdout.txt",
    content = ["to stdout\n"],
)

write_file(
    name = "expected_stderr",
    out = "expected_stderr.txt",
    content = ["to stderr\n"],
)

write_file(
    name = "expected_exitcode",
    out = "expected_exitcode.txt",
    content = ["42"],
)

diff_test(
    name = "test_stdout",
    file1 = "expected_stdout",
    file2 = "actual_stdout",
)

diff_test(
    name = "test_stderr",
    file1 = "expected_stderr",
    file2 = "actual_stderr",
)

diff_test(
    name = "test_exitcode",
    file1 = "expected_exitcode",
    file2 = "actual_exitcode",
)

js_test(
    name = "case7_test",
    args = ["dummy"],
    entry_point = "case7.js",
    expected_exit_code = 42,
    log_level = "debug",
)

# bazel run //examples:test10_binary
js_binary(
    name = "case7_binary",
    args = ["dummy"],
    entry_point = "case7.js",
    # Prevent bazel failing when a build step exits non-zero
    expected_exit_code = 42,
    log_level = "debug",
)

####################################################
# Use case 8
# Show that a js_binary can use a DirectoryPathInfo entry point

directory_path(
    name = "acorn_entry_point",
    directory = "//:node_modules/acorn/dir",
    path = "bin/acorn",
)

js_binary(
    name = "acorn_bin",
    args = ["--help"],
    entry_point = ":acorn_entry_point",
)

js_run_binary(
    name = "run8",
    args = ["--help"],
    stdout = "out8",
    tool = ":acorn_bin",
)

write_file(
    name = "expected8",
    out = "expected8.txt",
    content = [
        "usage: acorn [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]",
        "        [--tokenize] [--locations] [---allow-hash-bang] [--allow-await-outside-function] [--compact] [--silent] [--module] [--help] [--] [infile]",
        "",
    ],
)

diff_test(
    name = "test8",
    file1 = ":expected8",
    file2 = ":out8",
)

####################################################
# Use case 9
# Show that we can run a generated bin from a package where the npm package
# is not linked. In this case @aspect-test/a is linked to the //examples/npm_deps:__pkg__

aspect_test_a_bin.bin_a_test(
    name = "aspect_bin_a_test",
)
