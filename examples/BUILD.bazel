load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//:defs.bzl", "package")
load("@acorn__8.4.0__links//:link_js_package.bzl", link_acorn = "link_js_package")
load("//js:defs.bzl", "link_js_package")

###########################

# Link the acorn package, was fetched separately with npm_import from /WORKSPACE, to
# bazel-bin/examples/node_modules
link_acorn()

# Example of manually linking a first party dependency to bazel-bin/examples/node_modules
link_js_package(
    name = package("@mycorp/mylib").name,
    src = "//examples/lib",
    visibility = ["//examples:__subpackages__"],
    deps = [package("acorn", "examples")],
)

###########################
# Fixtures for example tests

# Trivial test fixture: a nodejs program that writes to a file
write_file(
    name = "js",
    out = "some.js",
    content = ["require('fs').writeFileSync(process.argv[2], 'stuff')"],
    visibility = ["//examples:__subpackages__"],
)

# The output produced by that program, for assertions
write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
    visibility = ["//examples:__subpackages__"],
)

# Trivial test fixture: the shortest legal JS program
write_file(
    name = "write_one",
    out = "one.js",
    content = ["1"],
    visibility = ["//examples:__subpackages__"],
)

# For using acorn as our test fixture, this is
# the serialized AST for the that shortest legal JS program
write_file(
    name = "write_expected_one_ast",
    out = "expected_ast.json",
    content = [
        """{"type":"Program","start":0,"end":1,"body":[{"type":"ExpressionStatement","start":0,"end":1,"expression":{"type":"Literal","start":0,"end":1,"value":1,"raw":"1"}}],"sourceType":"script"}\n""",
    ],
    visibility = ["//examples:__subpackages__"],
)
