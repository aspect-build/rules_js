load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@example_npm_deps//:nodejs_packages.bzl", "nodejs_packages")
load("@example_npm_deps//:package.bzl", "package", "package_dir")
load("@example_npm_deps__acorn-8.4.0//:nodejs_package.bzl", nodejs_package_acorn = "nodejs_package")
load("//js:nodejs_binary.bzl", "nodejs_binary")
load("//js:nodejs_package.bzl", "nodejs_package")
load("//js:nodejs_test.bzl", "nodejs_test")
load("//js:run_binary.bzl", "run_binary")

###########################

nodejs_package_acorn()

nodejs_packages()

nodejs_package(
    name = package("@mycorp/mylib").name,
    src = "//example/lib",
    package_name = "@mycorp/mylib",
    deps = [package("acorn")],
)

###########################
# Fixtures for tests in this file

# Trivial test fixture: a nodejs program that writes to a file
write_file(
    name = "js",
    out = "some.js",
    content = ["require('fs').writeFileSync(process.argv[2], 'stuff')"],
)

# The output produced by that program, for assertions
write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
)

# Trivial test fixture: the shortest legal JS program
write_file(
    name = "write_one",
    out = "one.js",
    content = ["1"],
)

# For using acorn as our test fixture, this is
# the serialized AST for the that shortest legal JS program
write_file(
    name = "write_expected_one_ast",
    out = "expected_ast.json",
    content = [
        """{"type":"Program","start":0,"end":1,"body":[{"type":"ExpressionStatement","start":0,"end":1,"expression":{"type":"Literal","start":0,"end":1,"value":1,"raw":"1"}}],"sourceType":"script"}\n""",
    ],
)

#############################
# Test case 1
# Show that you can use the node toolchain together with a genrule().
# This gives you complete control over starting the interpreter, but you also have to
# manually handle module resolution.
genrule(
    name = "use_node_toolchain",
    srcs = ["some.js"],
    outs = ["actual1"],
    cmd = "$(NODE_PATH) $(execpath some.js) $@",
    toolchains = ["@node16_toolchains//:resolved_toolchain"],
    tools = ["@node16_toolchains//:resolved_toolchain"],
)

diff_test(
    name = "test_genrule",
    file1 = "expected",
    file2 = "actual1",
)

##########################################################
# Test case 2
# Directly invoke a bin from a package from npm to transform inputs to bazel-out
# Similar to build_bazel_rules_nodejs generated npm_package_bin targets

genrule(
    name = "call_acorn",
    srcs = [
        "one.js",
        package("acorn"),
        package_dir("acorn"),
    ],
    outs = ["actual2"],
    cmd = """
        $(NODE_PATH) \\
        ./$(execpath %s)/bin/acorn \\
        --compact \\
        $(execpath one.js) \\
        > $@""" % package_dir("acorn"),
    toolchains = ["@node16_toolchains//:resolved_toolchain"],
    tools = ["@node16_toolchains//:resolved_toolchain"],
)

diff_test(
    name = "test_acorn",
    file1 = "actual2",
    file2 = "expected_ast.json",
)

################################################
# Test case 3
# Run a first-party program that requires a package from npm
# Use a genrule to prove that works

copy_to_bin(
    name = "require_acorn_js",
    srcs = ["require_acorn.js"],
)

genrule(
    name = "require_acorn",
    srcs = [
        ":require_acorn_js",
        package("acorn"),
    ],
    outs = ["actual3"],
    cmd = """
        $(NODE_PATH) \\
        ./$(execpath :require_acorn_js) \\
        $@""",
    toolchains = ["@node16_toolchains//:resolved_toolchain"],
    tools = ["@node16_toolchains//:resolved_toolchain",],
)

diff_test(
    name = "test_require_acorn",
    file1 = "actual3",
    file2 = "expected_ast.json",
)

####################################################
# Test case 4
# Show that a nodejs_binary can be used with run_binary
# because everything it needs to run is in the runfiles

nodejs_binary(
    name = "bin",
    data = [package("acorn")],
    entry_point = "require_acorn.js",
)

run_binary(
    name = "run4",
    srcs = [],
    outs = ["actual4"],
    args = ["actual4"],
    chdir = package_name(),
    tool = ":bin",
)

diff_test(
    name = "test_nodejs_binary_under_run_binary",
    file1 = "expected_ast.json",
    file2 = "actual4",
)

################################
# Test case 5
# nodejs_test is just a nodejs_binary

nodejs_test(
    name = "test_test",
    data = ["@example_npm_deps//@types/node"],
    entry_point = "test.js",
)

###############################
# Test case 6
# a first-party library which we want to run as a program

write_file(
    name = "write6",
    out = "case6.js",
    content = [
        """require('fs').writeFileSync(process.argv[2], require("@mycorp/mylib").toAst("1"))""",
    ],
)

nodejs_binary(
    name = "bin6",
    data = [package("@mycorp/mylib")],
    entry_point = "case6.js",
)

run_binary(
    name = "run6",
    outs = ["actual6"],
    args = ["actual6"],
    chdir = package_name(),
    tool = ":bin6",
)

diff_test(
    name = "test6",
    file1 = "expected_ast.json",
    file2 = "actual6",
)

#######################################
# Test case 7
# transitive npm dependencies

write_file(
    name = "write7",
    out = "case7.js",
    content = ["require('fs').writeFileSync(process.argv[2], require('@gregmagolan/test-b'))"],
)

write_file(
    name = "expected7",
    out = "expected7.txt",
    content = ["test-b-0.0.2/test-a-0.0.1"],
)

nodejs_binary(
    name = "bin7",
    data = ["@example_npm_deps//@gregmagolan/test-b"],
    entry_point = "case7.js",
)

run_binary(
    name = "run7",
    srcs = [],
    outs = ["actual7"],
    args = ["example/actual7"],
    tool = ":bin7",
)

diff_test(
    name = "test7",
    file1 = "expected7",
    file2 = "actual7",
)

#######################################
# Test case 8
# run_binary with copy_srcs_to_bin = True
write_file(
    name = "write8",
    out = "case8.js",
    content = ["""
require('fs').writeFileSync(process.argv[2], JSON.stringify(require(require('path').join(process.cwd(), "case8.json"))))"""],
)

write_file(
    name = "expected8",
    out = "expected8.txt",
    content = ["{\"case7\":42}"],
)

nodejs_binary(
    name = "bin8",
    entry_point = "case8.js",
)

run_binary(
    name = "run8",
    srcs = ["case8.json"],
    outs = ["actual8"],
    args = ["actual8"],
    chdir = package_name(),
    tool = ":bin8",
    copy_srcs_to_bin = True,
)

diff_test(
    name = "test8",
    file1 = "expected8",
    file2 = "actual8",
)
